#!/usr/bin/env python

# Copyright 2011 GridCentric Inc.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

# A simple script that uses the novaclient to communicate with Openstack to
# provide the gridcentric specific functionality.

import argparse
import os
import sys
from gridcentric.nova.client.client import NovaClient

def usage():
    sys.stderr.write("usage: gc-api [options] <command>\n")
    sys.stderr.write("where options is any of the follwing:\n")
    sys.stderr.write("\n")
    sys.stderr.write("    --username <username> (defaults to NOVA_USER)\n")
    sys.stderr.write("\n")
    sys.stderr.write("    --apikey <apikey/password> (defaults to NOVA_API_KEY)\n")
    sys.stderr.write("\n")
    sys.stderr.write("    --projectid <project> (defaults to NOVA_PROJECT_ID)\n")
    sys.stderr.write("\n")
    sys.stderr.write("    --url <url> (defaults to NOVA_URL)\n")
    sys.stderr.write("\n")
    sys.stderr.write("where command is one of the following:\n")
    sys.stderr.write("\n")
    sys.stderr.write("    bless <instance id>\n")
    sys.stderr.write("        Creates a new blessed instance based off the given id.\n")
    sys.stderr.write("\n")
    sys.stderr.write("    discard <blessed instance id>\n")
    sys.stderr.write("        Discard the state associated with a blessed instance.\n")
    sys.stderr.write("\n")
    sys.stderr.write("    launch <blessed instance id> [target=<memory target>] "
                                    "[guest=<arg>:<value>,<arg>:<value>,...] "
                                    "[hypervisor=<arg>:<value>,<arg>:value>,...]\n")
    sys.stderr.write("        Launches a new clone instance from the given blessed id.\n")
    sys.stderr.write("\n")
    sys.stderr.write("    list-launched <instance id>\n")
    sys.stderr.write("        List instances launched from the given id.\n")
    sys.stderr.write("\n")
    sys.stderr.write("    list-blessed <instance id>\n")
    sys.stderr.write("        List instances blessed from the given id.\n")
    sys.stderr.write("\n")
    sys.stderr.write("    migrate <instance id> <dest>\n")
    sys.stderr.write("        Migrate a streamed instance.\n")
    sys.stderr.write("\n")
    sys.stderr.flush()

def env(e):
    return os.environ.get(e, '')


def get_parser():
    parser = argparse.ArgumentParser(prog='gc-api')

    parser.add_argument('--username',
            default=env('NOVA_USERNAME'),
            help='Defaults to env[NOVA_USERNAME].')

    parser.add_argument('--apikey',
            default=env('NOVA_API_KEY'),
            help='Defaults to env[NOVA_API_KEY].')

    parser.add_argument('--projectid',
            default=env('NOVA_PROJECT_ID'),
            help='Defaults to env[NOVA_PROJECT_ID].')

    parser.add_argument('--url',
            default=env('NOVA_URL'),
            help='Defaults to env[NOVA_URL].')

    return parser

parser = get_parser()
options, args = parser.parse_known_args(sys.argv)

def get_arg(n):
    if len(args) < n + 2:
        usage()
        exit()
    return args[n + 1]

def get_launch_params():

    def get_params(args, sep):
        params = {}
        for param in args:
            key, value = param.split(sep)
            if key in ["guest", "hypervisor"]:
                values = value.split(",")
                value = get_params(values, ":")
            params[key] = value
        return params

    params = {}
    if len(args) >= 3:
        params = get_params(args[3:], "=")
    return params

command = get_arg(0)

url, user, key, project = options.url, options.username, options.apikey, options.projectid
client = NovaClient(url, user, key, project)

if command == 'bless':
    instance_id = get_arg(1)
    print client.bless_instance(instance_id)

elif command == 'discard':
    instance_id = get_arg(1)
    client.discard_instance(instance_id)

elif command == 'launch':
    instance_id = get_arg(1)
    params = get_launch_params()
    print client.launch_instance(instance_id, params)

elif command == 'list-launched':
    instance_id = get_arg(1)
    for instance in client.list_launched_instances(instance_id):
        print instance['id']

elif command == 'list-blessed':
    instance_id = get_arg(1)
    for instance in client.list_blessed_instances(instance_id):
        print instance['id']

elif command == 'migrate':
    instance_id = get_arg(1)
    dest = get_arg(2)
    client.migrate_instance(instance_id, dest)

else:
    usage()
    exit()
