#!/usr/bin/env python

import logging
import logging.handlers
import os
import subprocess

import XenAPIPlugin

LOG_LEVEL        = logging.DEBUG
LOG_ROTATE_COUNT = 5
LOG_ROTATE_SIZE  = (1 << 20)

def gc_popen(cmd, env = None):
    logging.debug("About to execute %s" % cmd)
    if env:
        env.update(os.environ.items())
    return subprocess.Popen(cmd.split(), stdin=subprocess.PIPE, \
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE, \
                            close_fds=True, env = env)

def gc_wait_for_cmd(cmd):
    p = gc_popen(cmd)
    output, err = p.communicate()
    retval = p.returncode
    return (output, err, retval) 

def gc_cmd_and_log(cmd, extra_msg = ""):
    (output, err, retval) = gc_wait_for_cmd(cmd)
    logging.info(extra_msg + cmd + " | " + str(retval))
    return (output, err, retval)

def suspend_vms(session, args):
    
    cmd = "suspend.vms %s %s %s" % (args['uuid'], args['path'], args['name'])
    output, err, retval = gc_cmd_and_log(cmd, extra_msg = "Suspend finsihed: ")
    
    newuuid = ""
    if output != None:
        newuuid = output
    logging.debug("Suspend completed with newuuid=%s" %(newuuid))
    
    cmd = "xe vm-param-set uuid=%s name-label=%s" % (newuuid, args['name-label'])
    output, err, retval = gc_cmd_and_log(cmd, extra_msg = "Setting name-label complete: ")
    return newuuid # Dummy result

def launch_vms(sessoin, args):
    
    cmd = "launch.vms %s %s" % (args['uuid'], args['name'])
    gc_cmd_and_log(cmd, extra_msg = "Launch finsihed: ")

    return "" # Dummy result
    

def initLogger(filename):
    target_filename = os.path.join("/var/log/", filename)
    
    handler = logging.handlers.RotatingFileHandler(
                target_filename, mode = 'a',
                maxBytes = LOG_ROTATE_SIZE, backupCount = LOG_ROTATE_COUNT)
    
    formatter = logging.Formatter( \
        '%(asctime)s T-%(thread)d %(filename)s %(lineno)d %(levelname)s %(message)s')
    
    handler.setFormatter(formatter)
    
    # Clear out any original handlers and make them ours only.
    logger = logging.getLogger()
    for orig_handler in logger.handlers:
        logger.removeHandler(orig_handler)
    logger.addHandler(handler)
    
    # Set the global logging level as required.
    logger.setLevel(LOG_LEVEL)


if __name__ == '__main__':
    
    initLogger("gridcentric.xapi.log")
    
    XenAPIPlugin.dispatch({'suspend_vms': suspend_vms,
                           'launch_vms': launch_vms})
